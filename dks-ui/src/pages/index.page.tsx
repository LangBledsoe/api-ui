import type { GetServerSideProps, NextPage } from "next";
import { useState, useEffect } from "react";
import Head from "next/head";
import Layout from "../components/Layout/Layout";
import LoadingMessage from "../components/LoadingMessage/LoadingMessage";
import Table from "../components/Table/Table";
import ShareForm from "../components/ShareForm/ShareForm";
import styles from "./index.module.scss";
import { performDelete, postFormData, getPosts } from "../utils/api";
import Image from "next/image";

export interface Blog {
  id?: string;
  title: string;
  firstName: string;
  link: URL;
  imageUrl?: URL;
  dateAsDate?: Date;
}

export interface Props {
  initialBlogList: Blog[];
  enableImageURL: boolean;
}

export let submitDisabled:boolean = false;

const Home: NextPage<Props> = ({ initialBlogList, enableImageURL }: Props) => {
  let blogTable: JSX.Element;

  const [blogList, setBlogList] = useState(initialBlogList);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await getPosts();
        const posts: Blog[] = await response.json();

        if (response.status === 200) {
          submitDisabled = false;
          setBlogList(posts);
        }
      } catch (error) {
        console.error("Error fetching posts:", error);
      }
    };

    fetchPosts();
  }, []);

  const handleDeleteBlog: Function = (id: string) => {
    performDelete(id);
    setBlogList(blogList.filter((blog) => blog.id !== id));
  };

  const handleSubmit: Function = async (event: any, newBlog: Blog) => {
    event.preventDefault();
    try {
      await postFormData(newBlog);
      const updatedBlogListResponse = await getPosts();
      const updatedBlogList: Blog[] = await updatedBlogListResponse.json();
      setBlogList(updatedBlogList);
    } catch (error) {
      console.error("Error creating blog:", error);
    }
  };

  if (blogList) {
    if (blogList.length > 0) {
      blogTable = (
        <Table
          blogList={blogList}
          handleDelete={handleDeleteBlog}
          enableImageURL={enableImageURL}
        />
      );
    } else {
      blogTable = <LoadingMessage>No blog posts have been shared yet! Use the form above to share the first one!</LoadingMessage>;
    }
  } else {
    submitDisabled = true;
    blogTable = <LoadingMessage>Unable to reach API. Please make sure API is started, and environment variable &quot;DKS_API_BASE_URL&quot; is set.</LoadingMessage>;
  }

  return (
    <Layout title="DevOps Knowledge Share">
      <div>
        <Head>
          <title>DKS</title>
          <meta name="description" content="Generated by Liatrio" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
          <div>
            <div className={styles.bannerWrapper}>
              <div className={styles.mainBanner}>
                <h2>DevOps Community Shared Posts</h2>
                <p>
                  Let&apos;s grow this DevOps Community strong by sharing your
                  favorite article or blog post on DevOps culture, tools,
                  platform and more!
                </p>
              </div>
            </div>
            <div className={styles.shareForm}>
              <ShareForm
                enableImageURL={enableImageURL}
                handleSubmit={handleSubmit}
              />
            </div>
            <div className={styles.bloglist}>{blogTable}</div>
            <Image
              src="liatrioBG.svg"
              alt="Liatrio Background"
              width={2500}
              height={1406}
              className="bg-image"
            />
          </div>
        </main>
      </div>
    </Layout>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ }) => {
  return {
    props: {
      enableImageURL: process.env.ENABLE_IMAGE_URL === "true"
    },
  };
};

export default Home;
