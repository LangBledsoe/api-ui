name: Build Java Project

on:
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      tagTypes:
        required: false
        type: string
        default: |
          type=sha

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Test with Gradle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@d9c87d481d55275bb5441eef3fe0e46805f9ef70 # v3.5.0

      - name: Lint
        run: echo TODO linting

      - name: Unit Test
        run: ./gradlew test

      - name: Build JAR
        run: ./gradlew bootJar

      - name: Upload JAR
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: dks-api
          path: build/libs/devops-knowledge-share-api.jar

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up JDK 17
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@d9c87d481d55275bb5441eef3fe0e46805f9ef70 # v3.5.0

  docker-build:
    name: Build and Push Container Image
    needs: build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.meta.outputs.json }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Download JAR
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4
        with:
          name: dks-api
          path: build/libs

      - name: Log in to the Container registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}
          # when opened on pull request, no inputs are provided. when empty the
          # defaults are used which produces pr-* as the tag to the image using
          # the below information.
          #   type=schedule,pattern=nightly,enable=true,priority=1000
          #   type=ref,event=branch,enable=true,priority=600
          #   type=ref,event=tag,enable=true,priority=600
          #   type=ref,event=pr,prefix=pr-,enable=true,priority=600
          tags: |
            ${{ inputs.tagTypes }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Build and push Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5
        with:
          push: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  scan:
    needs: docker-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.docker-build.outputs.matrix).tags }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.version }}
          # exit-code: '1'
          # ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
        env:
          TRIVY_USERNAME: trivy
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: 'trivy-results'
          path: 'trivy-results.sarif'

      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Snapshots
        uses: aquasecurity/trivy-action@master
        with:
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: ${{ matrix.version }}
          github-pat: ${{ secrets.GITHUB_TOKEN }}
        env:
          TRIVY_USERNAME: trivy
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: 'trivy-sbom'
          path: 'dependency-results.sbom.json'

#      This can't be setup until we enable GHAS
#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: 'trivy-results.sarif'
